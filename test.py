import os
os.environ["CUDA_VISIBLE_DEVICES"] = "-1"  # V√¥ hi·ªáu h√≥a GPU

from flask import Flask, render_template, request
import joblib
import numpy as np
import pandas as pd
from keras.models import load_model
import unicodedata

# --- Load model v√† c√°c ƒë·ªëi t∆∞·ª£ng c·∫ßn thi·∫øt ---
model_path = 'model/ann_model.keras'
preprocessor = joblib.load("model/preprocessor_no_standarscaler.pkl")
feature_list = joblib.load("model/final_feature_list.pkl")

model = load_model(model_path, compile=False)
# --- Kh·ªüi t·∫°o Flask ---
app = Flask(__name__)
legal_map = {
    'S·ªï h·ªìng': 'Have certificate',
    'Kh√¥ng c√≥ gi·∫•y t·ªù': 'None',
    'H·ª£p ƒë·ªìng mua b√°n': 'Sale contract'
}
furniture_map = {
    'ƒê·∫ßy ƒë·ªß': 'Full',
    'C∆° b·∫£n': 'Basic',
    'Kh√¥ng c√≥': 'None'
}
# C√°c danh s√°ch h·ªó tr·ª£
province_mapping = {
    'TPHCM': 'H·ªì Ch√≠ Minh', 'TpHCM': 'H·ªì Ch√≠ Minh', 'TP. HCM': 'H·ªì Ch√≠ Minh',
    'TP H·ªì Ch√≠ Minh': 'H·ªì Ch√≠ Minh', 'H·ªì Ch√≠ M√≠nh': 'H·ªì Ch√≠ Minh', 'H·ªì Ch√≠ Minh.': 'H·ªì Ch√≠ Minh',
    'HaÃÄ N√¥Ã£i': 'H√† N·ªôi', 'HN': 'H√† N·ªôi', 'H√† N·ªôi.': 'H√† N·ªôi',
    'ƒê√† N·∫µng.': 'ƒê√† N·∫µng', 'ƒê√† N·∫µng': 'ƒê√† N·∫µng', 'C·∫ßn Th∆°.': 'C·∫ßn Th∆°'
}

major_cities = {
    'H·ªì Ch√≠ Minh': ['Qu·∫≠n 1', 'Qu·∫≠n 3', 'Qu·∫≠n 5', 'Qu·∫≠n 10', 'B√¨nh Th·∫°nh', 'Ph√∫ Nhu·∫≠n', 'Qu·∫≠n 7'],
    'H√† N·ªôi': ['Ba ƒê√¨nh', 'Ho√†n Ki·∫øm', 'ƒê·ªëng ƒêa', 'Hai B√† Tr∆∞ng', 'C·∫ßu Gi·∫•y', 'Thanh Xu√¢n', 'T√¢y H·ªì']
}

north = ['H√† N·ªôi', 'H·∫£i Ph√≤ng', 'Qu·∫£ng Ninh', 'B·∫Øc Ninh', 'H∆∞ng Y√™n']
central = ['ƒê√† N·∫µng', 'Th·ª´a Thi√™n Hu·∫ø', 'Qu·∫£ng Nam']
south = ['H·ªì Ch√≠ Minh', 'C·∫ßn Th∆°', 'B√¨nh D∆∞∆°ng', 'ƒê·ªìng Nai']

def get_region(province):
    if province in north:
        return 'North'
    elif province in central:
        return 'Central'
    elif province in south:
        return 'South'
    return 'Other'

def prepare_input(form_input):
    address = form_input['address']
    province = address.split(',')[-1].strip()
    province = province_mapping.get(province, province)

    # Th√†nh ph·ªë l·ªõn v√† trung t√¢m
    is_major_city = int(province in major_cities)
    is_center = 0
    if is_major_city:
        for d in major_cities[province]:
            if d in address:
                is_center = 1
                break

    # Region
    region = get_region(province)

    # C√°c th√¥ng tin c∆° b·∫£n
    area = int(form_input['area'])
    floors = int(form_input['floors'])
    bedrooms = int(form_input['bedrooms'])
    bathrooms = int(form_input['bathrooms'])

    # Optional: cho ph√©p nh·∫≠p AveragePricePerSquare, n·∫øu kh√¥ng c√≥ g√°n m·∫∑c ƒë·ªãnh
    avg_price = float(form_input.get('AveragePricePerSquare', 0))

    # T·∫°o DataFrame
    df = pd.DataFrame([{
        'Area': area,
        'Frontage': form_input['frontage'],
        'Access Road': form_input['access_road'],
        'Floors': floors,
        'Bedrooms': bedrooms,
        'Bathrooms': bathrooms,
        'Legal status': form_input['legal_status'],
        'Furniture state': form_input['furniture_state'],
        'is_major_city': is_major_city,
        'is_center_district': is_center,
        'region': region,
        'Total Room': bedrooms + bathrooms,
        'Total Room + Floor': bedrooms + bathrooms + floors,
        'Bedrooms * Area': bedrooms * area,
        'Bathrooms * Area': bathrooms * area,
        'Area_Floors': area * floors,
        'High_Values Real Estate': is_major_city * is_center,
        'AveragePricePerSquare': avg_price
    }])

    print("\nüìå ‚úÖ D·ªØ li·ªáu g·ªëc ch∆∞a scale:")
    print(df.T)

    # Ch·∫°y qua pipeline
    X_ready = preprocessor.transform(df)

    # Chuy·ªÉn th√†nh DataFrame ƒë·ªÉ d·ªÖ ƒë·ªçc log
    X_ready_df = pd.DataFrame(X_ready, columns=feature_list)

    print("\nüìè ‚úÖ D·ªØ li·ªáu sau khi scale:")
    print(X_ready_df.T)

    return X_ready_df
@app.route('/', methods=['GET', 'POST'])
def index():
    prediction = None
    
    if request.method == 'POST':
        try:
            print(request.form)
        except Exception as e:
            prediction = f"L·ªói: {str(e)}"
    return render_template('index.html', prediction=prediction)

if __name__ == '__main__':
    app.run(debug=True)
